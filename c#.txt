
https://github.com/dotnet/csharplang/blob/master/Language-Version-History.md
https://docs.microsoft.com/pt-br/dotnet/csharp/language-reference/keywords/

basic types
 int, long, double, float, decimal
 char, bool, string, dateTime, 
 uint, ulong, byte

basic operators
 + 
 - 
 * 
 /
 ==
 !=
 &&
 ||
 !
 =
 ??
 ?.
 ? : (ternary operator)
 is 

decision structures
 if
 else
 switch case

loops structures
 while
 do while
 for
 foreach
 break
 continue

error handling structures
 exceptions
 try catch
 try catch finally
 try finally
 (Re)throwing an exception https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw
 catch when https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/when

enum
namespace

OOP abstraction
 class
  constructor & destructor 
   chaining constructor
 abstract class
 partial class
 static class
  static constructor
 interfaces

OOP encapsulation
 access modifiers
 field
 properties
 fields vs properties
 auto implemented properties
 indexer property

OOP inheritance
  multiple vs single inheritance
  multiple inheritance vs composition
  override, virtual, new (modifiers)

OOP polimorphism
 Subtype polymorphism is also known as runtime polymorphism.
 Ad-hoc polymorphism is also known as overloading.
 Coercion is also known as (implicit or explicit) casting.
 Parametric polymorphism is also known as compile-time polymorphism ( c# generics )
  covariance, invariance, invariance
  method/class constraints

cast 
 as
 is (type pattern)
 explict cast

variable declarations
 var vs dynamic vs object
 const vs readonly
 anonymous objects

parameters
 ref, out, in
 params
 optional
 named

methods
 extension method
 anonymous functions https://docs.microsoft.com/pt-br/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-functions
 delegates already defined on framework (action, func, predicate) https://stackoverflow.com/questions/4317479/func-vs-action-vs-predicate
 multicast delegate
 events
 async lambda expression
 local functions (c# 7)
 expression body

collections
 array, list, queue, stack, dictionary, hashset
 IEnumerable
 linq (query syntax vs method syntax)
 yield return

low level
 using/IDisposable
 goto
 pointers
 unsafe code
 finalizers 
 preprocessor directives
 foreach behind the hood
 using behind the hood
 box and unbox
 checked/unchecked block (int.MaxValue + 1 ?)
 stack vs heap
 valueTypes vs referenceTypes
 

parallel programming
 lock
 tasks vs thread
 async wait 
 plinq
 concurrent collections (ConcurrentBag, ConcurrentStack, ConcurrentQueue, etc)

meta programming
 reflection (classes Type, PropertyInfo, FieldInfo, MemberInfo, MethodInfo, etc)
 typeof vs GetType
 expression tree
 attributes
 roslyn api https://docs.microsoft.com/pt-br/dotnet/csharp/roslyn-sdk/

user-defined
 user defined conversions (implicit & explicit cast)
 operator overloading

functional programming
 functions as first class citizens
 high order functions
 lambda expression
 closure
 transparency referential
 side-effects
 pure functions
 partial application vs currying vs uncurrying

others
 array intialize syntax https://github.com/leandromoh/uteis/blob/master/C%23/Estudos/array%20initializer%20syntax.cs
 custom-collection-initializers
 explicit interface implementations
 type Alias
 desconstruction for tuples and all
